--- Original Author(s) : ComradeCatilina
--- Edited : NLTP_ASHES
--- Date : 15/05/2023
--- License : <you choose that>, NLTP_ASHES' code is shared under CC BY-NC-SA 4.0.
---
--- Scripted used to manage the initialization of the different squads.
--- That includes spawning, and setting up custom logic schemes if need be.
---
--- TODO :
--- - remove spawn zaton_mercenary_1_squad
--- - change spawn smarts for 'marlo_stanfield_squad' and 'chris_partlow_squad' in spawn_data table

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local HI = has_alife_info
local GI = give_info
local DI = disable_info
local NI = function(str) return not (has_alife_info(str)) end

-- Constants

-- Example : spawn_data[<squad_section>] = { sid=<squad_story_id>, smart_name=<name_of_spawn_smart> };
local spawn_data = {
    ["marlo_stanfield_squad"]   = { sid="marlo_stanfield_squad",    smart_name="to_be_changed" };
    ["chris_partlow_squad"]     = { sid="chris_partlow_squad",      smart_name="to_be_changed" };
    ["zaton_eitri_squad"]       = { sid="zaton_eitri_squad",        smart_name="zat_stalker_base_smart" };
    ["zaton_brokkr_squad"]      = { sid="zaton_brokkr_squad",       smart_name="jup_b41"                };
    ["zaton_achilles_squad"]    = { sid="zaton_achilles_squad",     smart_name="zat_stalker_base_smart" };
    ["vybegallo_squad"]         = { sid="vybegallo_squad",          smart_name="agr_smart_terrain_4_4"  };
    ["sasha_tolstoy_squad"]     = { sid="sasha_tolstoy_squad",      smart_name="mar_smart_terrain_base" };
    ["ilya_muromets_squad"]     = { sid="ilya_muromets_squad",      smart_name="gar_smart_terrain_3_5"  };
    ["zaton_mercenary_1_squad"] = { sid="zaton_mercenary_1_squad",  smart_name="zat_b40_smart_terrain"  };
    ["anna_morphine_squad"]     = { sid="anna_morphine_squad",      smart_name="jup_a6"                 };
}

-- Example : logic_data[<npc_section>] = { sid=<npc_story_id>, ltx_name=<path_to_logic_scheme> };
local logic_data = {
    ["marlo_stanfield"]         = { sid="marlo_stanfield",  ltx_name=[[scripts\brotherhood_npc_control_marlo.ltx]] };
    ["chris_partlow"]           = { sid="chris_partlow",    ltx_name=[[scripts\brotherhood_npc_control_chris.ltx]] };
}

-- ---------------------------------------------------------------------------------------------------------------------
-- General functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function called on 'actor_on_first_update', used to spawn the different squads if they don't already exist.
--- @author NLTP_ASHES
--- @return nil
function setup_squads()
    for sec,data in pairs(spawn_data) do
        init_squad(sec, data)
    end
end

--- Function used to spawn a squad if it doesn't exist in the game world.
--- Contract on the info portion : <npc's squad section>_init
--- @author NLTP_ASHES
--- @param sec string
--- @param data table
--- @return nil
function init_squad(sec, data)
    local info_name = sec.."_init"
    if NI(info_name) then
        if not get_story_se_object(data.sid) then
            if data.x and data.y and data.z and data.lvid and data.gvid then
                local se_obj = alife_create(sec, vector():set(data.x, data.y, data.z), data.lvid, data.gvid)
            elseif data.smart_name then
                local smart = SIMBOARD.smarts_by_names[data.smart_name]
                local squad = SIMBOARD:create_squad(smart,sec)
            else
                printf("!ERROR | brotherhood_npcs.script | Invalid spawn data for %s !\n%s", sec, utils_data.print_table(data or {"nil table"}, false, true))
            end
        end
        if get_story_se_object(data.sid) then
            GI(info_name)
        end
    end
end

--- Function called on 'npc_on_net_spawn', used to setup a custom logic scheme on an NPC.
--- @param obj game_object
--- @param se_obj cse_alife_object
--- @return nil
function check_custom_logic(obj,se_obj)
    local data = logic_data[se_obj:section_name()]
    if data then
        setup_custom_logic(data.sid, data.ltx_name)
    end
end

--- Function used to setup a custom logic scheme on an NPC.
--- @param npc_sid string
--- @param ltx_name string
--- @return nil
function setup_custom_logic(npc_sid,ltx_name)

    local npc = get_story_object(npc_sid)
    npc:give_info_portion("npc_not_move")

    local ltx = ini_file(ltx_name)
    if not (ltx) then
        printf("!ERROR | brotherhood_npcs.script | Do not have access to %s! Make sure you installed properly!",ltx_name)
        return
    end

    local id = npc:id()
    local sim = alife()
    local se_npc = sim:object(id)
    local unreg_id = se_npc and se_npc.m_smart_terrain_id
    if (unreg_id and unreg_id ~= 65535) then
        local unreg = sim:object(unreg_id)
        if (unreg) then
            unreg:unregister_npc(se_npc)
        end
    end

    xr_logic.configure_schemes(npc, ltx, ltx_name, modules.stype_stalker, loaded and st.loaded_section_logic or "logic", "")

    local section = loaded and st.loaded_active_section or xr_logic.determine_section_to_activate(npc, ltx, "logic", db.actor)
    xr_logic.activate_by_section(npc, ltx, section, "", loaded)
    --printf("setup complete")
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
    RegisterScriptCallback("actor_on_first_update",setup_squads)
    RegisterScriptCallback("npc_on_net_spawn", check_custom_logic)
end